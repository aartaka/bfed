[bfed.bf -- the source code of bfed, Brainfuck-based ed re-implementation.

Code starts here:]

>+ ; line number / exit flag
[ ; main loop
 >>readln()
 <[+++++ +++++<] ; restore the original text
 +> ; set the case flag and get back to the command text
 ;;; case
 [ ; if exists
  ;; minus (45)
  ----- -----
  ----- -----
  ----- -----
  ----- -----
  -----
  [
   ;; '=' (61)
   ----- -----
   ----- -
   [ ; 'c' (99)
    ----- -----
    ----- -----
    ----- -----
    ----- ---
    [ ; 'd' (100)
     -
     [ ; 'p' (112)
      ----- ----- --
      [ ; 'q' (113)
       -
       [ ; not 'q'
        <-> ; empty the flag
        error()
       ]
       <
       [ ; when 'q'
        <[-]>[-] ; empty the line number and command flag
       ]
       >
      ]
      <
      [ ; when 'p'
       [-] ; empty command flag
       ;; 40 cells to line start
       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       [.>] ; print the whole line
       +++++ +++++.[-] ; print newline
       <[<]
       ;; 39 back to empty command flag
       <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      ]
      >
     ]
     <
     [ ; when 'd'
      - ; kill command flag
      ;; 40: move to the start of next line
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      [>]< ; then to the end of it
      [[-]<]> ; erase everything and stop at the line start
      >>>>> >>>>> >>>>> >>>>>
      >>>>> >>>>> >>>>> >>>>>
      >>>>> >>>>> >>>>> >>>>>
      >>>>> >>>>> >>>>> >>>>>
      >>>>> >>>>> >>>>> >>>>>
      >>>>> >>>>> >>>>> >>>>> >> ;; 122 to next line
      [
       [>]<
       ;; copy the full line
       [[prevline() + nextline() -]<]
       ;; compensate for the copy loop and move to next line
       > nextline()
      ]
      ;; 40: back to the command flag and set it
      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
      [
       -
       ;; Move to the previous command flag
       prevline()
       + ; and set it
       < ; move to line number
       [ ; if line number
        >-< ; kill command flag
        [<+>-] ; copy line number and exit the loop
       ]
       <[>+<-]> ; restore (possibly) destroyed line number
       > ; back to command flag | exit if line number was there
      ]
     ]
     >
    ]
    <
    [ ; when 'c'
     - ; erase the command flag
     ;; 40 cells to the right is the beginning of the line sector
     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
     readln()
     <[+++++ +++++<] ; restore the original text
     ;; 39 Move to command flag and exit
     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    ]
    >
   ]
   <
   [ ; when '='
    < ; move to line number and print it
    printint()
    +++++ +++++.[-]
   ]
   >
  ]
  <
  [ ; when minus
   <- ; move to line number and decrease it
   [
    >-< ; kill command flag
    ;; copy line number one line back
    [prevline() +
     nextline() -]
    ;; move one line back
    prevline()
    [<+>-] ; copy line number one cell to the right
    ;; move to the line and print it
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[.>]+++++ +++++.[-]
    ;; back to empty line number and empty command flag
    <[<]<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]<
   ]
   <[>+<-]> ; possibly restore line number
   >
   [ ; if command flag is there (no movement happened)
    <+>
    error()
   ]
  ]
  >
 ]
 <
 [ ; when a single newline
  ;; move to the beginning of line and set presence flag
  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>
  [ ; if something on the line
   <-> ; kill presence flag
   [.>]+++++ +++++.[-] ; print the line
   ;; loop and 40: move back to line number
   <[<]<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
   ;; copy line number one sector forward
   [nextline() + prevline() -]
   ; move to next line (increase line number)
   nextline() +
   ;; 41: move to line start
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   [<<+>>-] ; copy the first char if something on the line
  ]
  <<[>>+<<-] ; copy (possibly) saved first char
  > ; back to the presence flag
  [error()]
  ;; 39: back to the command flag and kill it
  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
 ]
 <
] ; main loop


